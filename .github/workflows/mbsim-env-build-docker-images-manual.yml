name: Build Docker Images (Manual)
on:
  workflow_dispatch:
    inputs:
      buildImage:
        description: "* Build 'build' image"
        required: true
        default: false
        type: boolean
      buildwin64Image:
        description: "* Build 'buildwin64' image"
        required: true
        default: false
        type: boolean
      buildmsys2ucrt64baseImage:
        description: "* Build 'buildmsys2ucrt64base' image"
        required: true
        default: false
        type: boolean
      buildmsys2ucrt64Image:
        description: "* Build 'buildmsys2ucrt64' image"
        required: true
        default: true
        type: boolean
      buildmsys2ucrt64ImageDownload:
        description: "....* download msys2 db/cache"
        required: true
        default: true
        type: boolean
      buildmsys2ucrt64ImageUpload:
        description: "....* upload msys2 db/cache"
        required: true
        default: true
        type: boolean
      buildmsys2ucrt64ImageUpdateByPublic:
        description: "....* update by public repo"
        required: true
        default: false
        type: boolean
env:
  # get secrets
  mbsimenvsec_dockerhubAccessToken: ${{secrets.dockerhubAccessToken}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  MSYS2INSTALLERURI: "https://www.mbsim-env.de/base/fileDownloadFromDBMedia/msys2mbsimenv-downloads"
  MSYS2INSTALLERDOWNLOAD: ${{ inputs.buildmsys2ucrt64ImageDownload && 1 || 0 }}
  MSYS2INSTALLERUPLOAD: ${{ inputs.buildmsys2ucrt64ImageUpload && 1 || 0 }}
  MSYS2INSTALLERUPDATEBYPUBLIC: ${{ inputs.buildmsys2ucrt64ImageUpdateByPublic && 1 || 0 }}
  MSYS2INSTALLERRSYNCURI: "dockeruser@www.mbsim-env.de:/data/databasemedia/msys2mbsimenv-downloads"
  MSYS2INSTALLERRSYNCPORT: 1122
jobs:
  buildImage:
    name: "Bulid Linux Docker Image"
    runs-on: ubuntu-22.04
    if: ${{inputs.buildImage}}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Docker login"
        run: echo $Env:mbsimenvsec_dockerhubAccessToken | docker login -u fm12 --password-stdin
      - name: "Docker pull build"
        run: docker pull mbsimenv/build:latest
      - name: "Docker build"
        run: docker build -t mbsimenv/build:latest --cache-from mbsimenv/build:latest -f docker/buildImage/Dockerfile .
      - name: "Docker push build"
        run: docker push mbsimenv/build:latest
  buildwin64Image:
    name: "Bulid Windows-XC Docker Image"
    runs-on: ubuntu-22.04
    if: ${{inputs.buildwin64Image}}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Docker login"
        run: echo $Env:mbsimenvsec_dockerhubAccessToken | docker login -u fm12 --password-stdin
      - name: "Docker pull build"
        run: docker pull mbsimenv/buildwin64:latest
      - name: "Docker build"
        run: docker build -t mbsimenv/buildwin64:latest --cache-from mbsimenv/buildwin64:latest -f docker/buildwin64Image/Dockerfile .
      - name: "Docker push build"
        run: docker push mbsimenv/buildwin64:latest
  buildmsys2ucrt64Image:
    name: "Bulid MSYS2 Docker Image"
    runs-on: windows-2019
    if: ${{inputs.buildmsys2ucrt64Image}}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Docker login"
        run: echo $Env:mbsimenvsec_dockerhubAccessToken | docker login -u fm12 --password-stdin
      - name: "Docker pull base"
        run: docker pull mbsimenv/buildmsys2ucrt64base:latest
      - name: "Docker build base"
        if: ${{inputs.buildmsys2ucrt64baseImage}}
        run: docker build -t mbsimenv/buildmsys2ucrt64base:latest --cache-from mbsimenv/buildmsys2ucrt64base:latest -f docker/buildmsys2ucrt64baseImage/Dockerfile .
      - name: "Docker push base"
        if: ${{inputs.buildmsys2ucrt64baseImage}}
        run: docker push mbsimenv/buildmsys2ucrt64base:latest
      - name: "Docker pull build"
        run: docker pull mbsimenv/buildmsys2ucrt64:latest
      - name: "Docker build"
        run: >
          docker build
          --build-arg=MSYS2INSTALLERURI="${{env.MSYS2INSTALLERURI}}"
          --build-arg=MSYS2INSTALLERDOWNLOAD="${{env.MSYS2INSTALLERDOWNLOAD}}"
          --build-arg=MSYS2INSTALLERUPDATEBYPUBLIC="${{env.MSYS2INSTALLERUPDATEBYPUBLIC}}"
          --build-arg=MSYS2INSTALLERUPLOAD="${{env.MSYS2INSTALLERUPLOAD}}"
          -t mbsimenv/buildmsys2ucrt64:latest
          --cache-from mbsimenv/buildmsys2ucrt64:latest
          -f docker/buildmsys2ucrt64Image/Dockerfile .
      - name: "Docker push build"
        run: docker push mbsimenv/buildmsys2ucrt64:latest
      - name: "Upload msys2 db and cache"
        if: ${{env.MSYS2INSTALLERUPLOAD == 1}}
        run: >
          docker run
          --env mbsimenvsec_filestoragePassword
          --env MSYS2INSTALLERRSYNCPORT
          --env MSYS2INSTALLERRSYNCURI
          --entrypoint c:/msys64/usr/bin/bash
          mbsimenv/buildmsys2ucrt64:latest
          -l -c /context/msys2_upload.sh
