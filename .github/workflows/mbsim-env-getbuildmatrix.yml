name: Get Build Matrix
on:
  workflow_call:
    inputs:
      dailyRun:
        required: true
        type: boolean
      pushSource: # JSON string: {"repository": ?, "ref_name": ?, "sha": ?}
        required: true # only required for dailyRun==False, but fromJson is evaluated in all cases and needs to be valid
        type: string
    outputs:
      matrix:
        value: ${{jobs.getBuildMatrix.outputs.matrix}}
    secrets:
      githubAccessToken:
        required: true
      mbsimenvAccessToken:
        required: true
      djangoSecretKey:
        required: true
      postgresPassword:
        required: true
      filestoragePassword:
        required: true
env:
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: latest
  MBSIMENVSERVERNAME: www.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:443
  MBSIMENVDATABASE: www.mbsim-env.de:5432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:1122
  # get secrets
  mbsimenvsec_githubAccessToken: ${{secrets.githubAccessToken}}
  mbsimenvsec_mbsimenvAccessToken: ${{secrets.mbsimenvAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
jobs:
  getBuildMatrix:
    name: "."
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{steps.matrix.outputs.matrix}}
    steps:
      - name: "Install using pip"
        run: pip install requests
      - name: "Get branch combinations from MBSim-Env server"
        id: matrix
        shell: python
        run: |
          import json
          import requests
          import itertools
          # get branch combinations
          if "${{inputs.dailyRun}}"=="true":
            model="DailyBranches"
          else:
            model="CIBranches"
          response=requests.get("https://${{env.MBSIMENVWWW}}/service/db/getbranchcombi/"+model+"/", verify=False)
          branchCombination=response.json()["data"]
          # check repo
          if "${{inputs.dailyRun}}"=="true":
            matrix={"branches": branchCombination,
              "os": [
                {"buildType": "linux64-dailydebug",
                 "image": "mbsimenv/build",
                 "runsOn": "ubuntu-22.04",
                 "mountBase": "",
                 "args": "--ccacheSize 0.69",
                 "dockerargs": ""},
                {"buildType": "linux64-dailyrelease",
                 "image": "mbsimenv/build",
                 "runsOn": "ubuntu-22.04",
                 "mountBase": "",
                 "args": "--ccacheSize 0.73",
                 "dockerargs": ""},
                {"buildType": "msys2win64-dailyrelease",
                 "image": "mbsimenv/buildmsys2ucrt64",
                 "runsOn": "windows-2022",
                 "mountBase": "c:/msys64",
                 "args": "--ccacheSize 0.75",
                 "dockerargs": "--isolation=hyperv --memory=15g --cpu-count=4"},
              ]}
          else:
            # print repo, branch and sha
            repo="${{fromJson(inputs.pushSource).repository}}".split("/")[1]
            branch="${{fromJson(inputs.pushSource).ref_name}}"
            sha="${{fromJson(inputs.pushSource).sha}}"
            print("Got action for repo="+repo+" branch="+branch+" sha="+sha)
            # all branch combinations to build
            branches=list(filter(lambda x: x[repo+"Branch"]==branch, branchCombination))
            # if no branch combination is found build this branch with "master" of all other repos
            if len(branches)==0:
              branches=[{"fmatvecBranch": "master", "hdf5serieBranch": "master", "openmbvBranch": "master", "mbsimBranch": "master"}]
              branches[0][repo+"Branch"]=branch+"*"+sha+"*T"
            else:
              # override repo branch with sha
              for b in branches:
                b[repo+"Branch"]+="*"+sha+"*T"
            matrix={"branches": branches,
              "os": [
                {"buildType": "linux64-ci",
                 "image": "mbsimenv/build",
                 "runsOn": "ubuntu-22.04",
                 "mountBase": "",
                 "args": "--ccacheSize 0.63",
                 "dockerargs": ""},
                {"buildType": "msys2win64-ci",
                 "image": "mbsimenv/buildmsys2ucrt64",
                 "runsOn": "windows-2022",
                 "mountBase": "c:/msys64",
                 "args": "--ccacheSize 0.63",
                 "dockerargs": "--isolation=hyperv --memory=15g --cpu-count=4"},
              ]}
          # linearize matrix and remove master, linux-dailydebug combination
          matrix=itertools.product(matrix["branches"], matrix["os"])
          matrix=map(lambda x: {"branches": x[0], "os": x[1]}, matrix)
          matrix=filter(lambda x: x["os"]["buildType"]!="linux64-dailydebug" or
                                  x["branches"]["fmatvecBranch"]!="master" or
                                  x["branches"]["hdf5serieBranch"]!="master" or
                                  x["branches"]["openmbvBranch"]!="master" or
                                  x["branches"]["mbsimBranch"]!="master", matrix)
          matrix={"data": list(matrix)}
          # set output
          print("jobs.getBuildMatrix.steps.matrix.outputs.matrix:\n"+json.dumps(matrix, indent=2))
          with open(r"${{github.output}}", "at") as o:
            print("matrix="+json.dumps(matrix), file=o)
