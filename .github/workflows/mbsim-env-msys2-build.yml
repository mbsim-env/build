name: MSYS2 Build (Repo-Dispatch)
on:
  push:
env:
  # set the CPU type for OpenBLAS to avoid CPU dependent results (e.g. with/without AVX512)
  OPENBLAS_CORETYPE: Haswell
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: latest
  MBSIMENVSERVERNAME: www.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:443
  MBSIMENVDATABASE: www.mbsim-env.de:5432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:1122
  # get secrets
  mbsimenvsec_githubAccessToken: ${{secrets.githubAccessToken}}
  mbsimenvsec_mbsimenvAccessToken: ${{secrets.mbsimenvAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  mbsimenvsec_dockerhubAccessToken: ${{secrets.dockerhubAccessToken}}
  GH_TOKEN: ${{github.token}} # needed for gh-actions-cache
jobs:
  build:
    name: "msys2-build"
    runs-on: windows-2019
    steps:
      #mfmf
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Docker login"
        run: echo $Env:mbsimenvsec_dockerhubAccessToken | docker login -u fm12 --password-stdin
      - name: "Docker pull base"
        run: docker pull mbsimenv/buildmsys2ucrt64base:latest
      - name: "Docker pull"
        run: docker pull mbsimenv/buildmsys2ucrt64:latest
      - name: "Docker build"
        run: docker build -t mbsimenv/buildmsys2ucrt64:latest --cache-from mbsimenv/buildmsys2ucrt64:latest -f docker/buildmsys2ucrt64Image/Dockerfile .
      - name: "Docker push"
        run: docker push mbsimenv/buildmsys2ucrt64:latest
      #mfmf
      #- name: "Docker: pull image"
      #  run: docker pull mbsimenv/buildmsys2ucrt64:latest
      #mfmf
      - name: "Docker: create bind mount points"
        run: >
          mkdir ${{github.workspace}}\mbsim-env &&
          mkdir ${{github.workspace}}\mbsim-ccache
      - name: "Create build UUID"
        shell: python
        id: matrixUUID
        run: |
          import uuid
          print("jobs.build.steps.matrixUUID.outputs.matrixUUID:\n"+str(uuid.uuid4()))
          with open(r"${{github.output}}", "at") as o:
            print("matrixUUID="+str(uuid.uuid4()), file=o)
      - name: "Cache restore: ccache"
        uses: actions/cache/restore@v4
        with:
          path: ${{github.workspace}}\mbsim-ccache
          key: ccache-msys2win64-ci--${{steps.matrixUUID.outputs.matrixUUID}}
          restore-keys: |
            ccache-msys2win64-ci--
      - name: "Docker: run container"
        run: >
          docker run
          --init
          --label buildtype=msys2win64-ci
          --env OPENBLAS_CORETYPE
          --env MBSIMENVDATABASE
          --env MBSIMENVFILESTORAGE
          --env MBSIMENVSERVERNAME
          --env MBSIMENVTAGNAME
          --env MBSIMENVIMAGEID=$(docker image inspect -f "{{.Id}}" mbsimenv/buildmsys2ucrt64:latest)
          --env mbsimenvsec_githubAccessToken
          --env mbsimenvsec_mbsimenvAccessToken
          --env mbsimenvsec_djangoSecretKey
          --env mbsimenvsec_postgresPassword
          --env mbsimenvsec_filestoragePassword
          -v ${{github.workspace}}\mbsim-env:c:\msys64\mbsim-env
          -v ${{github.workspace}}\mbsim-ccache:c:\msys64\mbsim-ccache
          mbsimenv/buildmsys2ucrt64:latest
          --buildType msys2win64-ci
          --executor '<a class="MBSIMENV_EXECUTOR_GITHUBACTION" href="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}/attempts/${{github.run_attempt}}">GitHub Actions</a>'
          ${{github.run_attempt>1 && '--forceBuild' || ''}}
          --ccacheSize 5
          --fmatvecBranch master
          --hdf5serieBranch master
          --openmbvBranch master
          --mbsimBranch master
      - name: "Cache save: ccache"
        uses: actions/cache/save@v4
        with:
          path: ${{github.workspace}}/mbsim-ccache
          key: ccache-msys2win64-ci--${{steps.matrixUUID.outputs.matrixUUID}}
      - name: "Cache remove-old: ccache"
        shell: C:\msys64\usr\bin\bash.exe -l {0}
        run: >
          gh extension install actions/gh-actions-cache &&
          KEYS=$(gh actions-cache list --key ccache-msys2win64-ci-- --order desc --sort created-at --repo ${{github.repository}} --branch ${{github.ref_name}} | tail -n +2 | cut -f1) &&
          for KEY in $KEYS; do gh actions-cache delete $KEY --confirm --repo ${{github.repository}} --branch ${{github.ref_name}}; done
