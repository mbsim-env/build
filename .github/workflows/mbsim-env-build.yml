name: Build
on:
  workflow_call:
    inputs:
      matrix: # JSON string: {"data":
              #  [{"os": {"buildType": ?, "image": ?, "args": ?, "dockerargs": ?},
              #    "branches": {"fmatvecBranch": ?, "hdf5serieBranch": ?, "openmbvBranch": ?, "mbsimBranch": ?, }, }, ...]}
        required: true
        type: string
      uploadArtifactLocalLcov:
        required: true
        type: boolean
    outputs:
      whatToDo:
        value: ${{jobs.build.outputs.whatToDo}}
      buildInfo:
        value: ${{jobs.build.outputs.buildInfo}}
    secrets:
      githubAccessToken:
        required: true
      mbsimenvAccessToken:
        required: true
      djangoSecretKey:
        required: true
      postgresPassword:
        required: true
      filestoragePassword:
        required: true
env:
  # set the CPU type for OpenBLAS to avoid CPU dependent results (e.g. with/without AVX512)
  OPENBLAS_CORETYPE: Haswell
  # tagname and servername of remote mbsimenv server
  MBSIMENVTAGNAME: latest
  MBSIMENVSERVERNAME: www.mbsim-env.de
  # connect to this server:port for www, database and filestorage
  MBSIMENVWWW: www.mbsim-env.de:443
  MBSIMENVDATABASE: www.mbsim-env.de:5432
  MBSIMENVFILESTORAGE: www.mbsim-env.de:1122
  # get secrets
  mbsimenvsec_githubAccessToken: ${{secrets.githubAccessToken}}
  mbsimenvsec_mbsimenvAccessToken: ${{secrets.mbsimenvAccessToken}}
  mbsimenvsec_djangoSecretKey: ${{secrets.djangoSecretKey}}
  mbsimenvsec_postgresPassword: ${{secrets.postgresPassword}}
  mbsimenvsec_filestoragePassword: ${{secrets.filestoragePassword}}
  GH_TOKEN: ${{github.token}} # needed for gh-actions-cache
jobs:
  build:
    name: "${{matrix.data.os.buildType}}: ${{matrix.data.branches.fmatvecBranch}} ${{matrix.data.branches.hdf5serieBranch}} ${{matrix.data.branches.openmbvBranch}} ${{matrix.data.branches.mbsimBranch}}"
    runs-on: ${{matrix.data.os.runsOn}}
    outputs:
      whatToDo: ${{steps.whatToDo.outputs.data}}
      buildInfo: ${{steps.buildDetails.outputs.buildInfo}}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(inputs.matrix)}}
    steps:
      - name: "Install using pip"
        run: pip install requests
      - name: "Dump build config"
        shell: python
        run: |
          print(r'''
          buildType       = ${{matrix.data.os.buildType}}
          image           = ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}}
          runsOn          = ${{matrix.data.os.runsOn}}
          fmatvecBranch   = ${{matrix.data.branches.fmatvecBranch}}
          hdf5serieBranch = ${{matrix.data.branches.hdf5serieBranch}}
          openmbvBranch   = ${{matrix.data.branches.openmbvBranch}}
          mbsimBranch     = ${{matrix.data.branches.mbsimBranch}}
          args            = ${{matrix.data.os.args}}
          dockerargs      = ${{matrix.data.os.dockerargs}}
          Triggered by repo = ${{github.repository}}
                       branch = ${{github.ref_name}}
                       sha = ${{github.sha}}
                       event = ${{github.event_name}}''')
      - name: "Check what to do"
        id: whatToDo
        shell: python
        run: |
          import requests
          import json
          if ${{github.run_attempt}}>1 or "${{github.event_name}}"=="workflow_dispatch":
            data={
              "skip": False,
              "runID": None,
              "branches": {
                "fmatvec": "${{matrix.data.branches.fmatvecBranch}}",
                "hdf5serie": "${{matrix.data.branches.hdf5serieBranch}}",
                "openmbv": "${{matrix.data.branches.openmbvBranch}}",
                "mbsim": "${{matrix.data.branches.mbsimBranch}}"
              }
            }
          else:
            # get current branches SHA (if not SHA is specified explicitly)
            branches={}
            branches["fmatvec"]="${{matrix.data.branches.fmatvecBranch}}"
            branches["hdf5serie"]="${{matrix.data.branches.hdf5serieBranch}}"
            branches["openmbv"]="${{matrix.data.branches.openmbvBranch}}"
            branches["mbsim"]="${{matrix.data.branches.mbsimBranch}}"
            rs=requests.Session()
            for repo in ["fmatvec", "hdf5serie", "openmbv", "mbsim"]:
              if len(branches[repo].split("*"))>1:
                continue
              response=rs.get("https://api.github.com/repos/mbsim-env/"+repo+"/branches/"+branches[repo],
                              headers={"Authorization": "token ${{secrets.githubAccessToken}}"})
              if response.status_code==200:
                branches[repo]+="*"+response.json()["commit"]["sha"]
              else:
                raise RuntimeError("Failed to get SHA from github:\n"+response.text)
            # check if a new build is done with this
            def getTriggered(repo):
              branchSplit=branches[repo].split("*")
              if len(branchSplit)<3:
                return 0
              return 1 if branchSplit[2]=="T" else 0
            response=requests.get("https://{HOST}/builds/createUniqueRunID/{BT}/GITHUBACTION/{FMATVECSHA}/{HDF5SERIESHA}/{OPENMBVSHA}/{MBSIMSHA}/{FMATVECTRIGGERED}/{HDF5SERIETRIGGERED}/{OPENMBVTRIGGERED}/{MBSIMTRIGGERED}/".\
                                  format(HOST="${{env.MBSIMENVWWW}}", BT="${{matrix.data.os.buildType}}",
                                         FMATVECSHA=branches["fmatvec"].split("*")[1],
                                         HDF5SERIESHA=branches["hdf5serie"].split("*")[1],
                                         OPENMBVSHA=branches["openmbv"].split("*")[1],
                                         MBSIMSHA=branches["mbsim"].split("*")[1],
                                         FMATVECTRIGGERED=getTriggered("fmatvec"),
                                         HDF5SERIETRIGGERED=getTriggered("hdf5serie"),
                                         OPENMBVTRIGGERED=getTriggered("openmbv"),
                                         MBSIMTRIGGERED=getTriggered("mbsim")),
                                  verify=False,
                                  headers={"Authorization": "token ${{secrets.mbsimenvAccessToken}}"})
            skip=True
            runID=None
            if response.status_code==200:
              createUniqueRunID=response.json()
              print("createUniqueRunID:\n"+json.dumps(createUniqueRunID, indent=2))
              runID=createUniqueRunID["runID"]
              if runID is not None:
                skip=False
            else:
              raise RuntimeError("Failed to createUniqueRunID:\n"+response.text)
            data={"skip": skip, "runID": runID, "branches": branches}
          print("jobs.build.steps.whatToDo.outputs.data:\n"+json.dumps(data, indent=2))
          with open(r"${{github.output}}", "at") as o:
            print("data="+json.dumps(data), file=o)
      - name: "Maximize disk space (remove unwanted pre-installed software) [Linux]"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip && startsWith(matrix.data.os.runsOn, 'ubuntu')}}
        run: |
          BEFORE=$(df --output=used / | tail -n 1)
          #echo "Remove .NET (~1GB/~3sec)" && sudo rm -rf /usr/share/dotnet
          echo "Remove Android (~12GB/70sec)" && sudo rm -rf /usr/local/lib/android
          echo "Remove CodeQL (~8GB/1sec)" && sudo rm -rf /opt/hostedtoolcache/CodeQL
          #echo "Remove Docker images (~4GB/15sec)" && sudo docker image prune --all --force > /dev/null
          AFTER=$(df --output=used / | tail -n 1)
          echo "$[($BEFORE-$AFTER)/1000000]GB freed"
      - name: "Dump resources"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip}}
        shell: python
        run: |
          import shutil
          import os
          du=shutil.disk_usage(r"${{github.workspace}}")
          print(f"Disk: total={du.total/1024**3:.2f}GB used={du.used/1024**3:.2f}GB free={du.free/1024**3:.2f}GB")
          print(f"CPUs: {os.cpu_count()} (with hyperthreading)")
      - name: "Docker: pull image"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip}}
        run: docker image pull ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}}
      - name: "Docker: create bind mount points"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip}}
        run: >
          mkdir ${{github.workspace}}/mbsim-env &&
          mkdir ${{github.workspace}}/mbsim-ccache
      - name: "Docker: bind mount point permissions [Linux]"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip && startsWith(matrix.data.os.runsOn, 'ubuntu')}}
        run: >
          chmod 777 ${{github.workspace}}/mbsim-env &&
          chmod 777 ${{github.workspace}}/mbsim-ccache
      - name: "Docker: bind mount point permissions [Windows]"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip && !startsWith(matrix.data.os.runsOn, 'ubuntu')}}
        run: >
          icacls.exe ${{github.workspace}}/mbsim-env /l /t /grant everyone:f > NUL &&
          icacls.exe ${{github.workspace}}/mbsim-ccache /l /t /grant everyone:f > NUL
      - name: "Create build matrix UUID"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip}}
        shell: python
        id: matrixUUID
        run: |
          import uuid
          print("jobs.build.steps.matrixUUID.outputs.matrixUUID:\n"+str(uuid.uuid4()))
          with open(r"${{github.output}}", "at") as o:
            print("matrixUUID="+str(uuid.uuid4()), file=o)
      - name: "Cache restore: ccache"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip}}
        uses: actions/cache/restore@v4
        with:
          path: ${{github.workspace}}/mbsim-ccache
          key: ccache-${{matrix.data.os.buildType}}--${{steps.matrixUUID.outputs.matrixUUID}}
          restore-keys: |
            ccache-${{matrix.data.os.buildType}}--
      - name: "Cache: fix ccache file permissions [Linux]"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip && startsWith(matrix.data.os.runsOn, 'ubuntu')}}
        run: chmod -R 777 ${{github.workspace}}/mbsim-ccache
      - name: "Cache: fix ccache file permissions [Windows]"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip && !startsWith(matrix.data.os.runsOn, 'ubuntu')}}
        run: icacls.exe ${{github.workspace}}/mbsim-ccache /l /t /grant everyone:f > NUL
      - name: "Docker: run container"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip}}
        # TODO mfmf if the windows docker images are on windows-2022 then remove the dockerargs --isolation=hyperv ... and
        # replace the below
        # ${{startsWith(matrix.data.os.runsOn, 'windows') && ' ' || format('-v {0}/mbsim-env:{1}/mbsim-env', github.workspace, matrix.data.os.mountBase)}}
        # just to
        # -v ${{github.workspace}}/mbsim-env:${{matrix.data.os.mountBase}}/mbsim-env
        # The hack not to use a docker volume for /mbsim-env inside the docker is neede due to the Bug:
        # https://github.com/microsoft/Windows-Containers/issues/559 
        run: >
          docker run
          ${{matrix.data.os.dockerargs}}
          --init
          --label buildtype=${{matrix.data.os.buildType}}
          --env OPENBLAS_CORETYPE
          --env MBSIMENVDATABASE
          --env MBSIMENVFILESTORAGE
          --env MBSIMENVSERVERNAME
          --env MBSIMENVTAGNAME
          --env MBSIMENVIMAGEID=$(docker image inspect -f "{{.Id}}" ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}})
          --env mbsimenvsec_githubAccessToken
          --env mbsimenvsec_mbsimenvAccessToken
          --env mbsimenvsec_djangoSecretKey
          --env mbsimenvsec_postgresPassword
          --env mbsimenvsec_filestoragePassword
          ${{startsWith(matrix.data.os.runsOn, 'windows') && ' ' || format('-v {0}/mbsim-env:{1}/mbsim-env', github.workspace, matrix.data.os.mountBase)}}
          -v ${{github.workspace}}/mbsim-ccache:${{matrix.data.os.mountBase}}/mbsim-ccache
          ${{matrix.data.os.image}}:${{env.MBSIMENVTAGNAME}}
          --buildType ${{matrix.data.os.buildType}}
          --executor '<a class="MBSIMENV_EXECUTOR_GITHUBACTION" href="https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}/attempts/${{github.run_attempt}}">GitHub Actions</a>'
          ${{github.run_attempt>1 && '--forceBuild' || ''}}
          --fmatvecBranch ${{fromJson(steps.whatToDo.outputs.data).branches.fmatvec}}
          --hdf5serieBranch ${{fromJson(steps.whatToDo.outputs.data).branches.hdf5serie}}
          --openmbvBranch ${{fromJson(steps.whatToDo.outputs.data).branches.openmbv}}
          --mbsimBranch ${{fromJson(steps.whatToDo.outputs.data).branches.mbsim}}
          ${{fromJson(steps.whatToDo.outputs.data).runID && '--buildRunID'}} ${{fromJson(steps.whatToDo.outputs.data).runID}}
          ${{matrix.data.os.args}}
      - name: "Dump link to MBSim-Env server"
        if: ${{always() && !fromJson(steps.whatToDo.outputs.data).skip}}
        id: buildDetails
        shell: python
        run: |
          import json
          try:
            with open(r"${{github.workspace}}/mbsim-env/local/.buildInfo.json", "r") as f:
              buildInfo=json.load(f)
          except:
            print("No buildInfo file found")
            buildInfo={}
          else:
            print("https://${{env.MBSIMENVSERVERNAME}}/builds/run/"+str(buildInfo["buildRunID"])+"/")
          print("jobs.build.steps.buildDetails.outputs.buildInfo:\n"+json.dumps(buildInfo, indent=2))
          with open(r"${{github.output}}", "at") as o:
            print("buildInfo="+json.dumps(buildInfo), file=o)
      - name: "Artifact: zip prefix and coverage-files"
        if: ${{always() && inputs.uploadArtifactLocalLcov && !fromJson(steps.whatToDo.outputs.data).skip}}
        run: >
          (cd ${{github.workspace}}/mbsim-env/ && find -name "*.gcda" >  ${{github.workspace}}/local-cov.files) &&
          (cd ${{github.workspace}}/mbsim-env/ && find -name "*.gcno" >> ${{github.workspace}}/local-cov.files) &&
          (cd ${{github.workspace}}/mbsim-env/ && 7z a -spf ${{github.workspace}}/local-cov.7z
          local/ @${{github.workspace}}/local-cov.files);
          rm -f ${{github.workspace}}/local-cov.files
      - name: "Artifact: upload zip of prefix and coverage-files"
        if: ${{always() && inputs.uploadArtifactLocalLcov && !fromJson(steps.whatToDo.outputs.data).skip}}
        uses: actions/upload-artifact@v4
        with:
          name: mbsim-env-local-cov
          retention-days: 1
          compression-level: 0
          path: ${{github.workspace}}/local-cov.7z
      - name: "Cache save: ccache"
        if: ${{always() && !fromJson(steps.whatToDo.outputs.data).skip}}
        uses: actions/cache/save@v4
        with:
          path: ${{github.workspace}}/mbsim-ccache
          key: ccache-${{matrix.data.os.buildType}}--${{steps.matrixUUID.outputs.matrixUUID}}
      - name: "Cache remove-old: ccache"
        if: ${{always() && !fromJson(steps.whatToDo.outputs.data).skip}}
        shell: python
        run: |
          import subprocess
          subprocess.check_call(["gh", "extension", "install", "actions/gh-actions-cache"])
          for line in subprocess.check_output(["gh", "actions-cache", "list", "--key", "ccache-${{matrix.data.os.buildType}}--",
                                               "--order", "desc", "--sort", "created-at", "--repo", "${{github.repository}}",
                                               "--branch", "${{github.ref_name}}"]).decode("utf-8").splitlines()[1:]:
            key = line.split("\t")[0]
            subprocess.check_call(["gh", "actions-cache", "delete", key, "--confirm",
                                   "--repo", "${{github.repository}}", "--branch", "${{github.ref_name}}"])
      - name: "Dump resources"
        if: ${{!fromJson(steps.whatToDo.outputs.data).skip}}
        shell: python
        run: |
          import shutil
          import os
          du=shutil.disk_usage(r"${{github.workspace}}")
          print(f"Disk: total={du.total/1024**3:.2f}GB used={du.used/1024**3:.2f}GB free={du.free/1024**3:.2f}GB")
          print(f"CPUs: {os.cpu_count()} (with hyperthreading)")
