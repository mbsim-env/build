#!/bin/bash

# base variables
BASENAME=$(basename $0)
DIRNAME=$(dirname $0)

if [ "$BASENAME" == "mbsbd" ]; then
  # direct run (not via a link)

  SCRIPTDIR=$(readlink -f $DIRNAME)
  MBSIMENVDIR=$(readlink -f "$SCRIPTDIR"/../../..)
  
  # help
  if [ $# -le 0 ]; then
    echo "This script runs the command provided as first argument in the mbsimenv/buildwin64 Docker image."
    echo "All other arguments are passed to the command running in Docker."
    echo "If this script is started via a symbolic link to it, then the name of the program to run is"
    echo "the name of link and all arguments are passed."
    echo "Examples:"
    echo "$ <path>/mbsbd make - runs make in the Docker directory corresponding to the current directory."
    echo "$ <path>/mbsbd mbsimxml MBS.mbsx - runs the MBSim XML model MBS.mbsx in the Docker"
    echo "                                           directory corresponding to the current directory."
    echo "..."
    exit 0
  fi
  
  # check docker
  if ! docker version > /dev/null; then
    echo 'Cannot run docker. Please install and enable docker as the current user or'
    echo '(not recommended) run this script as root.'
  fi

  MBSIMENVTAGNAME=${MBSIMENVTAGNAME:-latest}

  # convert the absolute path stored in PABS to the corresponding docker path
  function convertPABS {
    PCANO=$(readlink -m $PABS)
    if [ "${PCANO:0:${#MBSIMENVDIR}}" == "$MBSIMENVDIR" ]; then
      PABS=/mbsim-env${PCANO:${#MBSIMENVDIR}}
    else
      echo "ERROR: The path $PABS is not a subdir of $MBSIMENVDIR. This cannot be handled by $BASENAME."
      echo "If you mean a native path in the Docker image prefix this argument with DOCKERDIR:"
      exit 1
    fi
  }
  
  # convert cur dir
  PABS=$PWD; convertPABS; CURDIR=$PABS
  
  #convert args
  INTERACTIVE=""
  ARGS=()
  while [ $# -ge 1 ]; do
    if [ "_$1" == "_MBSIMENV_INTERACTIVE" ]; then
      INTERACTIVE="-ti"
    elif [ "${1:0:1}" == "/" ]; then
      # convert absolute path
      PABS=$1; convertPABS
      ARGS+=("$PABS")
    elif [ "${1:0:10}" == "DOCKERDIR:" ]; then
      ARGS+=("${1:10}")
    else
      # keep everything else
      ARGS+=("$1")
    fi
    shift
  done
  
  # run in mbsimenv/build docker image
  # -e PATH= is the PATH in the container appended by :/mbsim-env/local-dockerwin64/bin
  # -e PKG_CONFIG_PATH= is the PKG_CONFIG_PATH in the container appended by :/mbsim-env/local-dockerwin64/lib/pkgconfig:/mbsim-env/local-dockerwin64/lib64/pkgconfig
  # -e WINEPATH= is the WINEPATH in the container appended by ;/mbsim-env/local-dockerwin64/bin
  exePrefix=""
  test ${ARGS: -4} == ".exe" && exePrefix=wine
  function callDocker {
    docker run --init --entrypoint= --rm \
      $INTERACTIVE \
      --user $(id -u):$(id -g) \
      -v "$MBSIMENVDIR":/mbsim-env \
      -v "$MBSIMENVDIR/.ccache":/mbsim-ccache \
      -v "$MBSIMENVDIR/.home":/tmp/home \
      -e GIT_COMMITTER_NAME=dummy -e GIT_COMMITTER_EMAIL=dummy \
      -e HOME=/tmp/home \
      -e PATH="/home/dockeruser/.local/bin:/home/dockeruser/bin:/usr/lib64/ccache:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/mbsim-env/local-dockerwin64/bin" \
      -e PKG_CONFIG_PATH="/3rdparty/local/lib/pkgconfig:/usr/x86_64-w64-mingw32/sys-root/mingw/lib/pkgconfig:/mbsim-env/local-dockerwin64/lib/pkgconfig:/mbsim-env/local-dockerwin64/lib64/pkgconfig" \
      -e WINEPATH="/usr/x86_64-w64-mingw32/sys-root/mingw/bin;/3rdparty/local/bin;/3rdparty/local/lib;/3rdparty/local/python-win64;/3rdparty/local/python-win64/Lib/site-packages/numpy/core;/3rdparty/local/python-win64/Lib/site-packages/numpy/.libs;/mbsim-env/local-dockerwin64/bin" \
      -w "$CURDIR" \
      -e DISPLAY \
      -v ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority \
      --net=host \
      mbsimenv/buildwin64:$MBSIMENVTAGNAME \
      $exePrefix "${ARGS[@]}"
  }
  if [ "_$INTERACTIVE" == "_" ]; then
    callDocker 1> >(sed -re "s+/mbsim-env/+$MBSIMENVDIR/+g") 2> >(sed -re "s+/mbsim-env/+$MBSIMENVDIR/+g" > /dev/stderr)
  else
    callDocker
  fi

else
  # run via a link

  $DIRNAME/mbsbd $BASENAME "$@"

fi
